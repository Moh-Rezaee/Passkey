{"version":3,"file":"base-context.js","sources":["../../../src/models/base-context.ts"],"sourcesContent":["import { Branding, Client, Prompt, Screen, Organization, User, Transaction, Tenant, UntrustedData } from '../models';\n\nimport type {\n  ClientMembers,\n  PromptMembers,\n  ScreenMembers,\n  OrganizationMembers,\n  UserMembers,\n  TransactionMembers,\n  TenantMembers,\n  UntrustedDataMembers,\n  BrandingMembers,\n} from '../../interfaces/models';\nimport type { BaseContext as UniversalLoginContext, BaseMembers } from '../../interfaces/models/base-context';\n\nexport class BaseContext implements BaseMembers {\n  branding: BrandingMembers;\n  screen: ScreenMembers;\n  tenant: TenantMembers;\n  prompt: PromptMembers;\n  organization: OrganizationMembers;\n  client: ClientMembers;\n  transaction: TransactionMembers;\n  user: UserMembers;\n  untrustedData: UntrustedDataMembers;\n\n  private static context: UniversalLoginContext | null = null;\n\n  constructor() {\n    if (!BaseContext.context) {\n      const globalWindow = window as unknown as { universal_login_context?: UniversalLoginContext };\n      BaseContext.context = globalWindow.universal_login_context ?? null;\n    }\n\n    const context = BaseContext.context;\n\n    if (!context) {\n      throw new Error('Universal Login Context is not available on the global window object.');\n    }\n\n    this.branding = new Branding(context.branding);\n    this.screen = new Screen(context.screen);\n    this.tenant = new Tenant(context.tenant);\n    this.prompt = new Prompt(context.prompt);\n    this.organization = new Organization(context.organization);\n    this.client = new Client(context.client);\n    this.transaction = new Transaction(context.transaction);\n    this.user = new User(context.user);\n    this.untrustedData = new UntrustedData(context.untrusted_data);\n  }\n\n  /** @ignore */\n  getContext<K extends keyof UniversalLoginContext>(model: K): UniversalLoginContext[K] | undefined {\n    if (!BaseContext.context) {\n      const globalWindow = window as unknown as { universal_login_context?: UniversalLoginContext };\n      BaseContext.context = globalWindow.universal_login_context ?? null;\n    }\n\n    if (!BaseContext.context) {\n      return undefined;\n    }\n\n    return BaseContext.context[model];\n  }\n}\n"],"names":["BaseContext","branding","screen","tenant","prompt","organization","client","transaction","user","untrustedData","static","constructor","context","globalWindow","window","universal_login_context","Error","this","Branding","Screen","Tenant","Prompt","Organization","Client","Transaction","User","UntrustedData","untrusted_data","getContext","model"],"mappings":"wXAeaA,EACXC,SACAC,OACAC,OACAC,OACAC,aACAC,OACAC,YACAC,KACAC,cAEQC,eAA+C,KAEvD,WAAAC,GACE,IAAKX,EAAYY,QAAS,CACxB,MAAMC,EAAeC,OACrBd,EAAYY,QAAUC,EAAaE,yBAA2B,IAC/D,CAED,MAAMH,EAAUZ,EAAYY,QAE5B,IAAKA,EACH,MAAM,IAAII,MAAM,yEAGlBC,KAAKhB,SAAW,IAAIiB,EAASN,EAAQX,UACrCgB,KAAKf,OAAS,IAAIiB,EAAOP,EAAQV,QACjCe,KAAKd,OAAS,IAAIiB,EAAOR,EAAQT,QACjCc,KAAKb,OAAS,IAAIiB,EAAOT,EAAQR,QACjCa,KAAKZ,aAAe,IAAIiB,EAAaV,EAAQP,cAC7CY,KAAKX,OAAS,IAAIiB,EAAOX,EAAQN,QACjCW,KAAKV,YAAc,IAAIiB,EAAYZ,EAAQL,aAC3CU,KAAKT,KAAO,IAAIiB,EAAKb,EAAQJ,MAC7BS,KAAKR,cAAgB,IAAIiB,EAAcd,EAAQe,gBAIjD,UAAAC,CAAkDC,GAChD,IAAK7B,EAAYY,QAAS,CACxB,MAAMC,EAAeC,OACrBd,EAAYY,QAAUC,EAAaE,yBAA2B,IAC/D,CAED,GAAKf,EAAYY,QAIjB,OAAOZ,EAAYY,QAAQiB"}