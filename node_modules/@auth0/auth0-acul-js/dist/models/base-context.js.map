{"version":3,"file":"base-context.js","sources":["../../../src/models/base-context.ts"],"sourcesContent":["import { Branding, Client, Prompt, Screen, Organization, User, Transaction, Tenant, UntrustedData } from '../models';\n\nimport type {\n  ClientMembers,\n  PromptMembers,\n  ScreenMembers,\n  OrganizationMembers,\n  UserMembers,\n  TransactionMembers,\n  TenantMembers,\n  UntrustedDataMembers,\n  BrandingMembers,\n} from '../../interfaces/models';\nimport type { BaseContext as UniversalLoginContext, BaseMembers } from '../../interfaces/models/base-context';\n\nexport class BaseContext implements BaseMembers {\n  branding: BrandingMembers;\n  screen: ScreenMembers;\n  tenant: TenantMembers;\n  prompt: PromptMembers;\n  organization: OrganizationMembers;\n  client: ClientMembers;\n  transaction: TransactionMembers;\n  user: UserMembers;\n  untrustedData: UntrustedDataMembers;\n\n  private static context: UniversalLoginContext | null = null;\n  static screenIdentifier: string = '';\n\n  constructor() {\n    if (!BaseContext.context) {\n      const globalWindow = window as unknown as { universal_login_context?: UniversalLoginContext };\n      BaseContext.context = globalWindow.universal_login_context ?? null;\n    }\n\n    const context = BaseContext.context;\n    const screenIdentifier: string = new.target?.screenIdentifier;\n\n    if (!context) {\n      throw new Error('Universal Login Context is not available on the global window object.');\n    }\n\n    if (screenIdentifier !== context?.screen?.name && screenIdentifier !== '') {\n      throw new Error(\n        `Incorrect import: The current screen name does not match the imported screen class. Imported Screen: ${screenIdentifier}, Current Screen: ${context?.screen?.name}`,\n      );\n    }\n\n    this.branding = new Branding(context.branding);\n    this.screen = new Screen(context.screen);\n    this.tenant = new Tenant(context.tenant);\n    this.prompt = new Prompt(context.prompt);\n    this.organization = new Organization(context.organization);\n    this.client = new Client(context.client);\n    this.transaction = new Transaction(context.transaction);\n    this.user = new User(context.user);\n    this.untrustedData = new UntrustedData(context.untrusted_data);\n  }\n\n  /** @ignore */\n  getContext<K extends keyof UniversalLoginContext>(model: K): UniversalLoginContext[K] | undefined {\n    if (!BaseContext.context) {\n      const globalWindow = window as unknown as { universal_login_context?: UniversalLoginContext };\n      BaseContext.context = globalWindow.universal_login_context ?? null;\n    }\n\n    if (!BaseContext.context) {\n      return undefined;\n    }\n\n    return BaseContext.context[model];\n  }\n}\n"],"names":["BaseContext","branding","screen","tenant","prompt","organization","client","transaction","user","untrustedData","static","constructor","context","globalWindow","window","universal_login_context","screenIdentifier","Error","name","this","Branding","Screen","Tenant","Prompt","Organization","Client","Transaction","User","UntrustedData","untrusted_data","getContext","model"],"mappings":"wXAeaA,EACXC,SACAC,OACAC,OACAC,OACAC,aACAC,OACAC,YACAC,KACAC,cAEQC,eAA+C,KACvDA,wBAAkC,GAElC,WAAAC,GACE,IAAKX,EAAYY,QAAS,CACxB,MAAMC,EAAeC,OACrBd,EAAYY,QAAUC,EAAaE,yBAA2B,IAC/D,CAED,MAAMH,EAAUZ,EAAYY,QACtBI,cAAuCA,iBAE7C,IAAKJ,EACH,MAAM,IAAIK,MAAM,yEAGlB,GAAID,IAAqBJ,GAASV,QAAQgB,MAA6B,KAArBF,EAChD,MAAM,IAAIC,MACR,wGAAwGD,sBAAqCJ,GAASV,QAAQgB,QAIlKC,KAAKlB,SAAW,IAAImB,EAASR,EAAQX,UACrCkB,KAAKjB,OAAS,IAAImB,EAAOT,EAAQV,QACjCiB,KAAKhB,OAAS,IAAImB,EAAOV,EAAQT,QACjCgB,KAAKf,OAAS,IAAImB,EAAOX,EAAQR,QACjCe,KAAKd,aAAe,IAAImB,EAAaZ,EAAQP,cAC7Cc,KAAKb,OAAS,IAAImB,EAAOb,EAAQN,QACjCa,KAAKZ,YAAc,IAAImB,EAAYd,EAAQL,aAC3CY,KAAKX,KAAO,IAAImB,EAAKf,EAAQJ,MAC7BW,KAAKV,cAAgB,IAAImB,EAAchB,EAAQiB,gBAIjD,UAAAC,CAAkDC,GAChD,IAAK/B,EAAYY,QAAS,CACxB,MAAMC,EAAeC,OACrBd,EAAYY,QAAUC,EAAaE,yBAA2B,IAC/D,CAED,GAAKf,EAAYY,QAIjB,OAAOZ,EAAYY,QAAQmB"}