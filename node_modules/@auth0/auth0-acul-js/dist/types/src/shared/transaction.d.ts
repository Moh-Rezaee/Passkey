import type { UsernamePolicy, PasswordPolicy, TransactionContext } from '../../interfaces/models/transaction';
import type { TransactionMembersOnLoginId } from '../../interfaces/screens/login-id';
import type { TransactionMembersOnSignupId } from '../../interfaces/screens/signup-id';
/**
 * Checks if signup is enabled for the current connection.
 */
export declare function isSignupEnabled(transaction: TransactionContext): boolean;
/**
 * Checks if forgot password is enabled.
 */
export declare function isForgotPasswordEnabled(transaction: TransactionContext): boolean;
/**
 * Checks if passkeys are enabled in the current connection.
 */
export declare function isPasskeyEnabled(transaction: TransactionContext): boolean;
/**
 * Determines if a username is required for authentication.
 */
export declare function isUsernameRequired(transaction: TransactionContext): boolean;
/**
 * Retrieves the username policy from the transaction context.
 */
export declare function getUsernamePolicy(transaction: TransactionContext): UsernamePolicy | null;
/**
 * Retrieves the password policy from the transaction context.
 */
export declare function getPasswordPolicy(transaction: TransactionContext): PasswordPolicy | null;
/**
 * Returns the allowed identifiers (email, username, phone) based on the connection settings.
 */
export declare function getAllowedIdentifiers(transaction: TransactionContext): TransactionMembersOnLoginId['allowedIdentifiers'];
/**
 * Returns the required identifiers for signup (email, username, phone).
 */
export declare function getRequiredIdentifiers(transaction: TransactionContext): TransactionMembersOnSignupId['requiredIdentifiers'];
/**
 * Returns the optional identifiers for signup (email, username, phone).
 */
export declare function getOptionalIdentifiers(transaction: TransactionContext): TransactionMembersOnSignupId['optionalIdentifiers'];
export declare function hasFlexibleIdentifier(transaction: TransactionContext): boolean;
//# sourceMappingURL=transaction.d.ts.map