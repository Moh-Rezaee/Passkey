import{BaseContext as t}from"../../models/base-context.js";import{Errors as s}from"../../utils/errors.js";import{getAnalyticsData as a,FormHandler as n}from"../../utils/form-handler.js";import{getPasskeyCredentials as e}from"../../utils/passkeys.js";import{ScreenOverride as i}from"./screen-override.js";import{TransactionOverride as o}from"./transaction-override.js";class r extends t{screen;transaction;constructor(){super();const t=this.getContext("screen"),s=this.getContext("transaction");this.screen=new i(t),this.transaction=new o(s)}async login(t){const s={state:this.transaction.state,analytics:a(this.screen.name,"login")};await new n(s).submitData(t)}async socialLogin(t){const s={state:this.transaction.state};await new n(s).submitData(t)}async passkeyLogin(t){const a=this.screen.publicKey;if(!a)throw new Error(s.PASSKEY_DATA_UNAVAILABLE);const i=await e(a),o={state:this.transaction.state};await new n(o).submitData({...t,passkey:JSON.stringify(i)})}async pickCountryCode(t){const s={state:this.transaction.state};await new n(s).submitData({...t,action:"pick-country-code"})}}export{r as default};
//# sourceMappingURL=index.js.map
