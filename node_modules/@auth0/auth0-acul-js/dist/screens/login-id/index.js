import{BaseContext as t}from"../../models/base-context.js";import{ScreenIds as e}from"../../utils/enums.js";import{Errors as s}from"../../utils/errors.js";import{FormHandler as i}from"../../utils/form-handler.js";import{getPasskeyCredentials as n}from"../../utils/passkeys.js";import{ScreenOverride as r}from"./screen-override.js";import{TransactionOverride as a}from"./transaction-override.js";class o extends t{static screenIdentifier=e.LOGIN_ID;screen;transaction;constructor(){super();const t=this.getContext("screen"),e=this.getContext("transaction");this.screen=new r(t),this.transaction=new a(e)}async login(t){const e={state:this.transaction.state,telemetry:[o.screenIdentifier,"login"]};await new i(e).submitData(t)}async socialLogin(t){const e={state:this.transaction.state,telemetry:[o.screenIdentifier,"socialLogin"]};await new i(e).submitData(t)}async passkeyLogin(t){const e=this.screen.publicKey;if(!e)throw new Error(s.PASSKEY_DATA_UNAVAILABLE);const r=await n(e),a={state:this.transaction.state,telemetry:[o.screenIdentifier,"passkeyLogin"]};await new i(a).submitData({...t,passkey:JSON.stringify(r)})}async pickCountryCode(t){const e={state:this.transaction.state,telemetry:[o.screenIdentifier,"pickCountryCode"]};await new i(e).submitData({...t,action:"pick-country-code"})}}export{o as default};
//# sourceMappingURL=index.js.map
