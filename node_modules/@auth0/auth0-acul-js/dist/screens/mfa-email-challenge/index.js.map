{"version":3,"file":"index.js","sources":["../../../../src/screens/mfa-email-challenge/index.ts"],"sourcesContent":["import { BaseContext } from '../../models/base-context';\nimport { ScreenIds } from '../../utils/enums';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type {\n  MfaEmailChallengeMembers,\n  ContinueOptions,\n  ResendCodeOptions,\n  TryAnotherMethodOptions,\n  ScreenMembersOnMfaEmailChallenge as ScreenOptions,\n} from '../../../interfaces/screens/mfa-email-challenge';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * Class implementing the mfa-email-challenge screen functionality\n * This screen is shown when a user needs to verify their email during MFA\n */\nexport default class MfaEmailChallenge extends BaseContext implements MfaEmailChallengeMembers {\n  static screenIdentifier: string = ScreenIds.MFA_EMAIL_CHALLENGE;\n  screen: ScreenOptions;\n\n  /**\n   * Creates an instance of MfaEmailChallenge screen manager\n   */\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    this.screen = new ScreenOverride(screenContext);\n  }\n\n  /**\n   * Continues with the email challenge using the provided code\n   * @param payload The options containing the code and rememberDevice flag\n   * @example\n   * ```typescript\n   * import MfaEmailChallenge from '@auth0/auth0-acul-js/mfa-email-challenge';\n   *\n   * const mfaEmailChallenge = new MfaEmailChallenge();\n   * await mfaEmailChallenge.continue({\n   *   code: '123456',\n   *   rememberDevice: true\n   * });\n   * ```\n   */\n  async continue(payload: ContinueOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaEmailChallenge.screenIdentifier, 'continue'],\n    };\n    const submitPayload: Record<string, string | number | boolean> = { ...payload, action: 'default' };\n    if (payload.rememberDevice) {\n      submitPayload.rememberDevice = 'true';\n    }\n    await new FormHandler(options).submitData(submitPayload);\n  }\n\n  /**\n   * Resends the email code\n   * @param payload Optional custom options to include with the request\n   * @example\n   * ```typescript\n   * import MfaEmailChallenge from '@auth0/auth0-acul-js/mfa-email-challenge';\n   *\n   * const mfaEmailChallenge = new MfaEmailChallenge();\n   * await mfaEmailChallenge.resendCode();\n   * ```\n   */\n  async resendCode(payload?: ResendCodeOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaEmailChallenge.screenIdentifier, 'resendCode'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      action: 'resend-code',\n    });\n  }\n\n  /**\n   * Allows the user to try another MFA method\n   * @param payload Optional custom options to include with the request\n   * @example\n   * ```typescript\n   * import MfaEmailChallenge from '@auth0/auth0-acul-js/mfa-email-challenge';\n   *\n   * const mfaEmailChallenge = new MfaEmailChallenge();\n   * await mfaEmailChallenge.tryAnotherMethod();\n   * ```\n   */\n  async tryAnotherMethod(payload?: TryAnotherMethodOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaEmailChallenge.screenIdentifier, 'tryAnotherMethod'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      action: 'pick-authenticator',\n    });\n  }\n\n  /**\n   * Submits the action to pick a different Email configuration, if available.\n   * @param {CustomOptions} [payload] - Optional payload.\n   * @returns {Promise<void>}\n   * @example\n   * ```typescript\n   * import MfaEmailChallenge from '@auth0/auth0-acul-js/mfa-email-challenge';\n   *\n   * const mfaEmailChallenge = new MfaEmailChallenge();\n   * await mfaEmailChallenge.pickEmail();\n   * ```\n   */\n  async pickEmail(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaEmailChallenge.screenIdentifier, 'pickEmail'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({ ...payload, action: 'pick-email' });\n  }\n}\n\nexport { MfaEmailChallengeMembers, ContinueOptions, ResendCodeOptions, TryAnotherMethodOptions, ScreenOptions as ScreenMembersOnMfaEmailChallenge };\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["MfaEmailChallenge","BaseContext","static","ScreenIds","MFA_EMAIL_CHALLENGE","screen","constructor","super","screenContext","this","getContext","ScreenOverride","payload","options","state","transaction","telemetry","screenIdentifier","submitPayload","action","rememberDevice","FormHandler","submitData","resendCode","tryAnotherMethod","pickEmail"],"mappings":"4NAqBqB,MAAAA,UAA0BC,EAC7CC,wBAAkCC,EAAUC,oBAC5CC,OAKA,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UACtCD,KAAKJ,OAAS,IAAIM,EAAeH,GAiBnC,cAAM,CAASI,GACb,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAAkBiB,iBAAkB,aAE5CC,EAA2D,IAAKN,EAASO,OAAQ,WACnFP,EAAQQ,iBACVF,EAAcE,eAAiB,cAE3B,IAAIC,EAAYR,GAASS,WAAWJ,GAc5C,gBAAMK,CAAWX,GACf,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAAkBiB,iBAAkB,qBAE5C,IAAII,EAAYR,GAASS,WAA0B,IACpDV,EACHO,OAAQ,gBAeZ,sBAAMK,CAAiBZ,GACrB,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAAkBiB,iBAAkB,2BAE5C,IAAII,EAAYR,GAASS,WAA0B,IACpDV,EACHO,OAAQ,uBAgBZ,eAAMM,CAAUb,GACd,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAAkBiB,iBAAkB,oBAE5C,IAAII,EAAYR,GAASS,WAA0B,IAAKV,EAASO,OAAQ"}