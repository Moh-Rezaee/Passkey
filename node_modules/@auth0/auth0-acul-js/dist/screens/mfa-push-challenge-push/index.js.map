{"version":3,"file":"index.js","sources":["../../../../src/screens/mfa-push-challenge-push/index.ts"],"sourcesContent":["import { BaseContext } from '../../models/base-context';\nimport { ScreenIds } from '../../utils/enums';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type {\n  MfaPushChallengePushMembers,\n  ScreenMembersOnMfaPushChallengePush as ScreenOptions,\n  WithRememberOptions,\n} from '../../../interfaces/screens/mfa-push-challenge-push';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * Class implementing the mfa-push-challenge-push screen functionality\n * This screen is shown when a push notification has been sent to the user's device\n */\nexport default class MfaPushChallengePush extends BaseContext implements MfaPushChallengePushMembers {\n  static screenIdentifier: string = ScreenIds.MFA_PUSH_CHALLENGE_PUSH;\n  screen: ScreenOptions;\n\n  /**\n   * Creates an instance of MfaPushChallengePush screen manager\n   */\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    this.screen = new ScreenOverride(screenContext);\n  }\n\n  /**\n   * Continues with the push notification challenge\n   * @param payload Optional custom options to include with the request\n   * @example\n   * ```typescript\n   * const mfaPushChallengePush = new MfaPushChallengePush();\n   * await mfaPushChallengePush.continue();\n   * ```\n   */\n  async continue(payload?: WithRememberOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaPushChallengePush.screenIdentifier, 'continue'],\n    };\n\n    await new FormHandler(options).submitData<WithRememberOptions>({\n      rememberDevice: payload?.rememberDevice ?? false,\n      ...payload,\n      action: 'continue',\n    });\n  }\n\n  /**\n   * Resends the push notification\n   * @param payload Optional custom options to include with the request\n   * @example\n   * ```typescript\n   * const mfaPushChallengePush = new MfaPushChallengePush();\n   * await mfaPushChallengePush.resendPushNotification();\n   * ```\n   */\n  async resendPushNotification(payload?: WithRememberOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaPushChallengePush.screenIdentifier, 'resendPushNotification'],\n    };\n    await new FormHandler(options).submitData<WithRememberOptions>({\n      rememberDevice: payload?.rememberDevice ?? false,\n      ...payload,\n      action: 'resend',\n    });\n  }\n\n  /**\n   * Switches to entering the verification code manually\n   * @param payload Optional custom options to include with the request\n   * @example\n   * ```typescript\n   * const mfaPushChallengePush = new MfaPushChallengePush();\n   * await mfaPushChallengePush.enterCodeManually();\n   * ```\n   */\n  async enterCodeManually(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaPushChallengePush.screenIdentifier, 'enterCodeManually'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      action: 'enter-otp-code',\n    });\n  }\n\n  /**\n   * Allows trying another authentication method\n   * @param payload Optional custom options to include with the request\n   * @example\n   * ```typescript\n   * const mfaPushChallengePush = new MfaPushChallengePush();\n   * await mfaPushChallengePush.tryAnotherMethod();\n   * ```\n   */\n  async tryAnotherMethod(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaPushChallengePush.screenIdentifier, 'tryAnotherMethod'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      action: 'pick-authenticator',\n    });\n  }\n}\n\nexport { MfaPushChallengePushMembers, WithRememberOptions, ScreenOptions as ScreenMembersOnMfaPushChallengePush };\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["MfaPushChallengePush","BaseContext","static","ScreenIds","MFA_PUSH_CHALLENGE_PUSH","screen","constructor","super","screenContext","this","getContext","ScreenOverride","payload","options","state","transaction","telemetry","screenIdentifier","FormHandler","submitData","rememberDevice","action","resendPushNotification","enterCodeManually","tryAnotherMethod"],"mappings":"4NAmBqB,MAAAA,UAA6BC,EAChDC,wBAAkCC,EAAUC,wBAC5CC,OAKA,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UACtCD,KAAKJ,OAAS,IAAIM,EAAeH,GAYnC,cAAM,CAASI,GACb,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAAqBiB,iBAAkB,mBAG/C,IAAIC,EAAYL,GAASM,WAAgC,CAC7DC,eAAgBR,GAASQ,iBAAkB,KACxCR,EACHS,OAAQ,aAaZ,4BAAMC,CAAuBV,GAC3B,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAAqBiB,iBAAkB,iCAE/C,IAAIC,EAAYL,GAASM,WAAgC,CAC7DC,eAAgBR,GAASQ,iBAAkB,KACxCR,EACHS,OAAQ,WAaZ,uBAAME,CAAkBX,GACtB,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAAqBiB,iBAAkB,4BAE/C,IAAIC,EAAYL,GAASM,WAA0B,IACpDP,EACHS,OAAQ,mBAaZ,sBAAMG,CAAiBZ,GACrB,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAAqBiB,iBAAkB,2BAE/C,IAAIC,EAAYL,GAASM,WAA0B,IACpDP,EACHS,OAAQ"}