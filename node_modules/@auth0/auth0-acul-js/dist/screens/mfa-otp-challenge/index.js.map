{"version":3,"file":"index.js","sources":["../../../../src/screens/mfa-otp-challenge/index.ts"],"sourcesContent":["import { BaseContext } from '../../models/base-context';\nimport { ScreenIds } from '../../utils/enums';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type {\n  MfaOtpChallengeMembers,\n  ContinueOptions,\n  TryAnotherMethodOptions,\n  ScreenMembersOnMfaOtpChallenge as ScreenOptions,\n} from '../../../interfaces/screens/mfa-otp-challenge';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * Class implementing the mfa-otp-challenge screen functionality\n * This screen is shown when a user needs to enter an OTP code during MFA\n */\nexport default class MfaOtpChallenge extends BaseContext implements MfaOtpChallengeMembers {\n  static screenIdentifier: string = ScreenIds.MFA_OTP_CHALLENGE;\n  screen: ScreenOptions;\n\n  /**\n   * Creates an instance of MfaOtpChallenge screen manager\n   */\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    this.screen = new ScreenOverride(screenContext);\n  }\n\n  /**\n   * Continues with the OTP challenge using the provided code\n   * @param payload The options containing the code and rememberDevice flag\n   * @example\n   * ```typescript\n   * import MfaOtpChallenge from '@auth0/auth0-acul-js/mfa-otp-challenge';\n   *\n   * const mfaOtpChallenge = new MfaOtpChallenge();\n   * await mfaOtpChallenge.continue({\n   *   code: '123456',\n   *   rememberBrowser: true\n   * });\n   * ```\n   */\n  async continue(payload: ContinueOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaOtpChallenge.screenIdentifier, 'continue'],\n    };\n\n    const submitPayload: Record<string, string | number | boolean> = { ...payload, action: 'default' };\n\n    if (payload.rememberBrowser) {\n      submitPayload.rememberBrowser = 'true';\n    }\n\n    await new FormHandler(options).submitData(submitPayload);\n  }\n\n  /**\n   * Allows the user to try another MFA method\n   * @param payload Optional custom options to include with the request\n   * @example\n   * ```typescript\n   * import MfaOtpChallenge from '@auth0/auth0-acul-js/mfa-otp-challenge';\n   *\n   * const mfaOtpChallenge = new MfaOtpChallenge();\n   * await mfaOtpChallenge.tryAnotherMethod();\n   * ```\n   */\n  async tryAnotherMethod(payload?: TryAnotherMethodOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaOtpChallenge.screenIdentifier, 'tryAnotherMethod'],\n    };\n\n    await new FormHandler(options).submitData<CustomOptions>({ ...payload, action: 'pick-authenticator' });\n  }\n}\n\nexport { MfaOtpChallengeMembers, ContinueOptions, TryAnotherMethodOptions, ScreenOptions as ScreenMembersOnMfaOtpChallenge };\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["MfaOtpChallenge","BaseContext","static","ScreenIds","MFA_OTP_CHALLENGE","screen","constructor","super","screenContext","this","getContext","ScreenOverride","payload","options","state","transaction","telemetry","screenIdentifier","submitPayload","action","rememberBrowser","FormHandler","submitData","tryAnotherMethod"],"mappings":"4NAoBqB,MAAAA,UAAwBC,EAC3CC,wBAAkCC,EAAUC,kBAC5CC,OAKA,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UACtCD,KAAKJ,OAAS,IAAIM,EAAeH,GAiBnC,cAAM,CAASI,GACb,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAAgBiB,iBAAkB,aAG1CC,EAA2D,IAAKN,EAASO,OAAQ,WAEnFP,EAAQQ,kBACVF,EAAcE,gBAAkB,cAG5B,IAAIC,EAAYR,GAASS,WAAWJ,GAc5C,sBAAMK,CAAiBX,GACrB,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAAgBiB,iBAAkB,2BAG1C,IAAII,EAAYR,GAASS,WAA0B,IAAKV,EAASO,OAAQ"}