{"version":3,"file":"index.js","sources":["../../../../src/screens/signup-id/index.ts"],"sourcesContent":["import { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\nimport { TransactionOverride } from './transaction-override';\n\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type { TransactionContext } from '../../../interfaces/models/transaction';\nimport type {\n  SignupIdMembers,\n  ScreenMembersOnSignupId as ScreenOptions,\n  TransactionMembersOnSignupId as TransactionOptions,\n  SignupOptions,\n  SocialSignupOptions,\n} from '../../../interfaces/screens/signup-id';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\nexport default class SignupId extends BaseContext implements SignupIdMembers {\n  screen: ScreenOptions;\n  transaction: TransactionOptions;\n\n  constructor() {\n    super();\n\n    const screenContext = this.getContext('screen') as ScreenContext;\n    const transactionContext = this.getContext('transaction') as TransactionContext;\n\n    this.screen = new ScreenOverride(screenContext);\n    this.transaction = new TransactionOverride(transactionContext);\n  }\n\n  /**\n   * @remarks\n   * This methods handles signup-id related configuration.\n   * It allows to signup new users via different identifiers.\n   *\n   * @example\n   * import SignupId from \"@auth0/auth0-acul-js/signup-id\";\n   *\n   * const signupIdManager = new SignupId();\n   * const { transaction } = signupIdManager;\n   *\n   * //get mandatory & optional identifiers required for signup\n   * const mandatoryIdentifier = transaction.getRequiredIdentifiers(); // eg: email\n   * const optionalIdentifiers = transaction.getOptionalIdentifiers() // eg: phone\n   *\n   * const signupParams = {\n   *  email : \"testEmail\",\n   *  phone : \"+91923456789\"\n   * };\n   *\n   * signupIdManager.signup(signupParams);\n   */\n  async signup(payload: SignupOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n    };\n\n    const activeIdentifiers = this.transaction.requiredIdentifiers || [];\n    const missingParameters = activeIdentifiers.filter((param) => !Object.keys(payload).includes(param));\n    if (missingParameters.length) {\n      throw new Error(`Missing parameter(s): ${missingParameters.join(', ')}`);\n    }\n\n    if (payload.phone?.trim() ?? '') {\n      const { phone, ...rest } = payload;\n      payload = { ...rest, phone_number: phone };\n    }\n\n    await new FormHandler(options).submitData<SignupOptions>(payload);\n  }\n\n  /**\n   * @remarks\n   * This methods handles allows signup via different social identifiers.\n   * Eg: Google, Facebook etc.\n   *\n   * @example\n   * import SignupId from \"@auth0/auth0-acul-js/signup-id\";\n   *\n   * const signupIdManager = new SignupId();\n   * const { transaction } = signupIdManager;\n   *\n   * //get social connections\n   * const socialConnection = transaction.getAlternateConnections(); //eg: \"google-oauth2\"\n   *\n   * const signupParams = {\n   *  connection : socialConnection[0].name, // \"google-oauth2\"\n   * };\n   *\n   * signupIdManager.socialSignup(signupParams);\n   */\n  async socialSignup(payload: SocialSignupOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n    };\n    await new FormHandler(options).submitData<SocialSignupOptions>(payload);\n  }\n}\n\nexport {\n  SignupIdMembers,\n  SignupOptions,\n  SocialSignupOptions,\n  ScreenOptions as ScreenMembersOnSignupId,\n  TransactionOptions as TransactionMembersOnSignupId,\n};\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["SignupId","BaseContext","screen","transaction","constructor","super","screenContext","this","getContext","transactionContext","ScreenOverride","TransactionOverride","signup","payload","options","state","missingParameters","requiredIdentifiers","filter","param","Object","keys","includes","length","Error","join","phone","trim","rest","phone_number","FormHandler","submitData","socialSignup"],"mappings":"2OAiBqB,MAAAA,UAAiBC,EACpCC,OACAC,YAEA,WAAAC,GACEC,QAEA,MAAMC,EAAgBC,KAAKC,WAAW,UAChCC,EAAqBF,KAAKC,WAAW,eAE3CD,KAAKL,OAAS,IAAIQ,EAAeJ,GACjCC,KAAKJ,YAAc,IAAIQ,EAAoBF,GAyB7C,YAAMG,CAAOC,GACX,MAAMC,EAAuB,CAC3BC,MAAOR,KAAKJ,YAAYY,OAIpBC,GADoBT,KAAKJ,YAAYc,qBAAuB,IACtBC,QAAQC,IAAWC,OAAOC,KAAKR,GAASS,SAASH,KAC7F,GAAIH,EAAkBO,OACpB,MAAM,IAAIC,MAAM,yBAAyBR,EAAkBS,KAAK,SAGlE,GAAIZ,EAAQa,OAAOC,OAAc,CAC/B,MAAMD,MAAEA,KAAUE,GAASf,EAC3BA,EAAU,IAAKe,EAAMC,aAAcH,EACpC,OAEK,IAAII,EAAYhB,GAASiB,WAA0BlB,GAuB3D,kBAAMmB,CAAanB,GACjB,MAAMC,EAAuB,CAC3BC,MAAOR,KAAKJ,YAAYY,aAEpB,IAAIe,EAAYhB,GAASiB,WAAgClB"}