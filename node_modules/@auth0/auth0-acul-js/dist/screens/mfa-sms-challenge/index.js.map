{"version":3,"file":"index.js","sources":["../../../../src/screens/mfa-sms-challenge/index.ts"],"sourcesContent":["import { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type {\n  MfaSmsChallengeMembers,\n  MfaSmsChallengeOptions,\n  ScreenMembersOnMfaSmsChallenge as ScreenOptions,\n} from '../../../interfaces/screens/mfa-sms-challenge';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * This class provides methods to handle the mfa-sms-challenge screen.\n * @extends BaseContext\n */\nexport default class MfaSmsChallenge extends BaseContext implements MfaSmsChallengeMembers {\n  screen: ScreenOptions;\n\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    this.screen = new ScreenOverride(screenContext);\n  }\n\n  /**\n   * Submits the MFA SMS challenge with the provided code and rememberBrowser option.\n   * @param {MfaSmsChallengeOptions} payload - The payload containing the code and rememberBrowser option.\n   * @returns {Promise<void>}\n   * @example\n   * ```typescript\n   * import MfaSmsChallenge from '@auth0/auth0-acul-js/mfa-sms-challenge';\n   *\n   * const mfaSmsChallenge = new MfaSmsChallenge();\n   * await mfaSmsChallenge.continueMfaSmsChallenge({\n   *   code: '123456',\n   *   rememberBrowser: true,\n   * });\n   * ```\n   */\n  async continueMfaSmsChallenge(payload: MfaSmsChallengeOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n    };\n\n    const submitPayload: Record<string, string | number | boolean> = { ...payload, action: 'default' };\n\n    if (payload.rememberBrowser) {\n      submitPayload.rememberBrowser = 'true';\n    }\n\n    await new FormHandler(options).submitData(submitPayload);\n  }\n\n  /**\n   * Submits the action to pick a different SMS configuration, if available.\n   * @param {CustomOptions} [payload] - Optional payload.\n   * @returns {Promise<void>}\n   * @example\n   * ```typescript\n   * import MfaSmsChallenge from '@auth0/auth0-acul-js/mfa-sms-challenge';\n   *\n   * const mfaSmsChallenge = new MfaSmsChallenge();\n   * await mfaSmsChallenge.pickSms();\n   * ```\n   */\n  async pickSms(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n    };\n    await new FormHandler(options).submitData<CustomOptions>({ ...payload, action: 'pick-sms' });\n  }\n\n  /**\n   * Submits the action to resend the SMS code.\n   * @param {CustomOptions} [payload] - Optional payload.\n   * @returns {Promise<void>}\n   * @example\n   * ```typescript\n   * import MfaSmsChallenge from '@auth0/auth0-acul-js/mfa-sms-challenge';\n   *\n   * const mfaSmsChallenge = new MfaSmsChallenge();\n   * await mfaSmsChallenge.resendCode();\n   * ```\n   */\n  async resendCode(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n    };\n    await new FormHandler(options).submitData<CustomOptions>({ ...payload, action: 'resend-code' });\n  }\n\n  /**\n   * Submits the action to try another MFA method.\n   * @param {CustomOptions} [payload] - Optional payload.\n   * @returns {Promise<void>}\n   * @example\n   * ```typescript\n   * import MfaSmsChallenge from '@auth0/auth0-acul-js/mfa-sms-challenge';\n   *\n   * const mfaSmsChallenge = new MfaSmsChallenge();\n   * await mfaSmsChallenge.tryAnotherMethod();\n   * ```\n   */\n  async tryAnotherMethod(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n    };\n    await new FormHandler(options).submitData<CustomOptions>({ ...payload, action: 'pick-authenticator' });\n  }\n\n  /**\n   * Submits the action to switch to voice call verification.\n   * @param {CustomOptions} [payload] - Optional payload.\n   * @returns {Promise<void>}\n   * @example\n   * ```typescript\n   * import MfaSmsChallenge from '@auth0/auth0-acul-js/mfa-sms-challenge';\n   *\n   * const mfaSmsChallenge = new MfaSmsChallenge();\n   * await mfaSmsChallenge.getACall();\n   * ```\n   */\n  async getACall(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n    };\n    await new FormHandler(options).submitData<CustomOptions>({ ...payload, action: 'switch-to-voice' });\n  }\n}\n\nexport { MfaSmsChallengeMembers, MfaSmsChallengeOptions, ScreenOptions as ScreenMembersOnMfaSmsChallenge };\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["MfaSmsChallenge","BaseContext","screen","constructor","super","screenContext","this","getContext","ScreenOverride","continueMfaSmsChallenge","payload","options","state","transaction","submitPayload","action","rememberBrowser","FormHandler","submitData","pickSms","resendCode","tryAnotherMethod","getACall"],"mappings":"2KAkBqB,MAAAA,UAAwBC,EAC3CC,OAEA,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UACtCD,KAAKJ,OAAS,IAAIM,EAAeH,GAkBnC,6BAAMI,CAAwBC,GAC5B,MAAMC,EAAuB,CAC3BC,MAAON,KAAKO,YAAYD,OAGpBE,EAA2D,IAAKJ,EAASK,OAAQ,WAEnFL,EAAQM,kBACVF,EAAcE,gBAAkB,cAG5B,IAAIC,EAAYN,GAASO,WAAWJ,GAe5C,aAAMK,CAAQT,GACZ,MAAMC,EAAuB,CAC3BC,MAAON,KAAKO,YAAYD,aAEpB,IAAIK,EAAYN,GAASO,WAA0B,IAAKR,EAASK,OAAQ,aAejF,gBAAMK,CAAWV,GACf,MAAMC,EAAuB,CAC3BC,MAAON,KAAKO,YAAYD,aAEpB,IAAIK,EAAYN,GAASO,WAA0B,IAAKR,EAASK,OAAQ,gBAejF,sBAAMM,CAAiBX,GACrB,MAAMC,EAAuB,CAC3BC,MAAON,KAAKO,YAAYD,aAEpB,IAAIK,EAAYN,GAASO,WAA0B,IAAKR,EAASK,OAAQ,uBAejF,cAAMO,CAASZ,GACb,MAAMC,EAAuB,CAC3BC,MAAON,KAAKO,YAAYD,aAEpB,IAAIK,EAAYN,GAASO,WAA0B,IAAKR,EAASK,OAAQ"}